size: big
description: |
  I love the meta-programming system that Rust has. Compile-time code execution (Rust macros) allows for some amazing developer experience with 0 performance penalty. 

  Sadly, my other favorite programming language (Typescript) doesn’t support compile-time code execution, and they made it pretty clear that compiler plugins will never be a thing. So, I took matters into my own hands and implemented it myself.

  This project allows users to define their own macros using a new **********macro********** keyword. Macros are just normal functions that get called at compile time during transformation but also during checking. This means that you can use macros to generate both code that will be emitted in the final output, but also **types** that can be used during development by the language server to provide IntelliSense and the other code actions we are used to (completion, rename a symbol, go to definition, etc.).

  I also implemented other things I always wanted in typescript:

  - `defer` statements: works just like Go’s defer [https://gobyexample.com/defer](https://gobyexample.com/defer) but it can be on any statement/block, not only with functions.
  - `derive` implementations for classes: works just like `implements` or `extends`, but the implementation is generated with a macro.
  - `using` statements: works like C#’s using for `Disposable`
  - Operator overloading
  - Custom compiler options (build config)

  I also have some demos for this fork: https://github.com/laurci/ts-fork-demos and a VS Code extension that ads syntax highlighting for the new keywords I added https://github.com/laurci/ts-fork-vscode.
tags:
  - compiler
  - Typescript
  - meta-programming